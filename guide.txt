Modelagem da dados noSQL

 - Curso de MongoDB fundamental | Aprenda MongoDB em 1 hora - 2021
[ youtube.com/watch?v=x9tC0eK0GtA ]
(39:10)


Commands:

Criar um banco de dados MongoDB: 
 > use <db-name>
 
Exemplo:
use pessoaData


Nesse momento o banco de dados é criado temporariamente (ele ainda não existe), 
para concluir sua criação é necessário a inserção de novos dados.


Exibis todos os banco de dados:
 > show dbs



Collections (Conjunto equivalente a tabela do modelo relacional)
A sua criação é realizado automaticamente após a inserção de um novo dado.




Adicionar novo dados através de interface de linha de comando: 
> db.<collection-name>.insertOne( <dados-formato-JSON> )

Exemplo: 
> db.pessoas.insertOne( {nome: "Manhattan", idade: 70, profissao: "Engenheiro Nuclear", esta_empregado: true } )

db.pessoas.insertOne( {nome: "Jones", idade: 50, profissao: "Arqueólogo", esta_empregado: true } )


Consultar collections da base dos dados:
 > show collections
 
 

Adicionar mais de um elemento: 
.insertMany( [ {item: 1}, {item: 2}, ... ] )

Exemplo:
db.pessoas.insertMany([
    {nome: "João", idade: 29, profissao: "Marceneiro", esta_empregado: true}, 
    {nome: "Maria", idade: 31, profissao: "Vendedora", esta_empregado: false}
])



Consultar todos os dados: 
.find()

Exemplo:

db.pessoas.find()


Consultar todos os dados com parâmetro: 
find( {key: value} )

Exemplo: 
db.pessoas.find( { esta_empregado: true, nome: "João" } )


Qtde de registros: 
.find().count()


Apresentação estruturada dos dados:
.find().pretty()



Parâmetro de consulta: 
db.<collection>.find( { <parâmetro>: <valor-desejado> } )

Exemplo: 
> db.pessoas.find( { esta_empregado: true } )

Resultado: 
Apresentação de todas pessoas empregadas.




Consultar somente um registro [execução sem comando, responde com o primeiro registro da collection]: 
.findOne()


Consulta um registro espécifico. (Passar seu atributo no parâmetro.)
.findOne( { <key>: value } )

Exemplo: 
db.pessoas.find( { nome: "Maria" } )






Atualização dos dados - registro único: 
.updateOne( { <key>: <value> }, { $set: { <key>: <value> } } )

 - Nesse caso, a primeira chave e valor são correspondências para a consulta.
 - a segunda chave e valor, atributos que serão modificados.
 
Exemplo: 

db.pessoas.updateOne( { nome: "Maria" }, { $set: { esta_empregado: true} } )



Inserir/Atualizar um campo para os dados: 

.updateMany(<...>)



Exemplo: adicionar um novo campo para todos registro da base dos dados:
> db.pessoas.updateMany({}, { $set: { salario: 7000 } })


Exemplo: 
 > db.pessoas.updateMany({ country: "BR", esta_empregado: true }, { $set: { salario: 7500  } })

OBS: se passar dois valores para o mesmo parâmetro, somente o último valor será o cirtério final.




Deletar um usuário: 

db.pessoas.deleteOne( {nome: "José"} )

OBS: Exclusão do primeiro "José" que for encontrado na base dos dados.

Excluir várias dados: 
.deleteMany(<...>)





Operação de comparação: 

maior que: $gt: <valor>
maior ou igual: $gte: <valor>
menor que: $lt: <valor>
menor ou igual: $lte: <valor>

Buscar pessoas com mais de 30 anos na base de dados: 
exemplo: db.pessoas.find( idade: {$gt: 30} )


Disclaimer: gt = greater than (maior que)
Disclaimer: lt = less than (menor que)




Uperadores de atualização

$inc: Incrementar um valor (adicionar ou reduzir)

Exemplo: 
> db.pessoas.updateOne( { nome: "Paula" }, { $inc: { salario: 2000} } )s



Criar um novo index para o banco de dados:
> db.<collection-name>.createIndex( { "<nome-do-campo>": 1 } )

Exemplo:
> db.pessoas.createIndex( { "nome": 1 } )



Consulta indexes do para o banco de dados: 
db.pessoas.getIndexes()


Excluir um index: 

db.pessoas.dropIndex( "index-name" )

Exemplo: 
> db.pessoas.dropIndex("nome_1")